// Install and call libraries required to run this code in R
install.packages(c("tidytext" , "pdftools" , "rcrossref" , "tidyverse", "stringr"))
install.packages(c("wordcloud", "tm")) #also installs dependenices 'NLP', 'slam', 'BH'
install.packages(c("scales", "forcats", "httr", "jsonlite"))
library(tidytools)
library(pdftools)
library(rcrossref)
library(tidyverse) # metapackage with lots of helpful functions
knitr::opts_chunk$set(echo = TRUE)
library(tidytext)
library(stringr)
library(scales)
library(forcats)
library(wordcloud)
devtools::install_github("cpsievert/LDAvisData")
library(LDAvisData)
library(httr)
library(jsonlite)
library(tm) 
library(dplyr)

// look at how many environments have conflicting object names
options(tibble.print_min = Inf)
envs <- search() %>% setNames(., .)
fns <- lapply(envs, ls)
fns_by_env <- data_frame(
env = rep.int(names(fns), lengths(fns)),
fn  = unlist(fns))
fns_by_env %>% 
group_by(fn) %>% 
tally() %>% 
filter(n > 1) %>% 
inner_join(fns_by_env)

// masked functions include: %>%; Arith; Compare; 
// Position; add_row; all_of; alpha; annotate; any_of; as.difftime; 
// as_data_frame; as_label; as_tibble body<-; col_factor; contains
// data_frame; date; discard; ends_with; enexpr; enexpers; enquo; enquos; 
// ensym; ensyms; everything; expr; filter; glimpse; intersect
// kroenecker; lag; last_col; lst; matches; num_range; one_of; plot
// prompt; q; quit; quo; quo_name; quos; setdiff; setequal; show; starts_with
// sym; syms; text; tibble; tribble; type_sum; union; vars; words

// Set your Zotero API key and User ID 
zotero_api_key <- "RGadoNegCVtwA24yh5uzUVr0" #Find this in settings --> create new key
zotero_user_ID <- "12468420" # Find this in your Zotero settings 12468420

# Get your collection key (found in Zotero's web interface URL)
collection_key <- "DZ29GD7J" 

get_all_collection_items <- function(collection_key, start = 0, limit = 100) {
  base_url <- "https://api.zotero.org/users/"
  url <- paste0(base_url, zotero_user_ID, "/collections/", collection_key, "/items")

  response <- GET(url, add_headers("Zotero-API-Key" = zotero_api_key), query = list(start = start, limit = limit))
  #error checking
    if (response$status_code != 200) {
      stop("Initial API request failed. Status code:", response$status_code)
    }

  items <- fromJSON(content(response, as = "text"))
  print(paste("Fetched items:", start, "to", start + length(items)))

# Check if there are more results
  if (length(items) ==limit) {
    next_items <- get_all_collection_items(collection_key, start + limit, limit) 
    return(c(items, next_items))
  } else {
  #Reached the end
  return(items)
  }
}

# Function to retrieve and process items from a Zotero collection (all pages)
get_all_titles_and_authors <- function(collection_key) {
  all_items <- get_all_collection_items(collection_key)

  results <- lapply(all_items, function(item) {
    if (is.null(item$data$creators)) {
      # Handle a missing author
      warning("Item has no creators: ", item$data$title)
      return(NULL)

    } else if (item$data$itemType != "journalArticle") {
      # Handling wrong item type
      warning("Item is not a journal article: ", item$data$title)
      return(NULL)

    } else { # This else block was likely missing
      title <- item$data$title
      last_name <- item$data$creators[[1]]$lastName
      return(list(title = title, last_name = last_name))
    }
  })

  # Filter out NULLs (non-article items)
  results <- results[!sapply(results, is.null)]

  return(results)
}

titles_and_authors <- get_all_titles_and_authors(collection_key)

# Create a data frame
data <- data.frame(title = sapply(titles_and_authors, "[[", "title"),
                   author_last_name = sapply(titles_and_authors, "[[", "last_name"))

# Write to a CSV file
write.csv(data, file = "zotero_articles.csv", row.names = FALSE)



/////////////////////////

  # Filter out NULLs (non-article items)
  results <- results[!sapply(results, is.null)]

  return(results)
}


#Retrieve items from the collection
collection_items <- get_collection_items(collection_key)

#count how many items in the collection
num_items <- length(collection_items)
print(num_items)

# Example: Print the titles of all items in the retrieved collection
for (item in collection_items) {
  print(item$data$title) 
}

# Function to retrieve and process items from a Zotero collection
get_first_author_last_names <- function(collection_key) {
  items <- get_collection_items(collection_key)

  first_author_last_names <- sapply(items, function(item) {
    # Check if item has creators and is an article
    if (!is.null(item$data$creators) && item$data$itemType == "journalArticle") {
      last_name <- item$data$creators[[1]]$lastName
      return(last_name)
    } else {
      return(NA) # Or another placeholder if not an article or no authors
    }
  })

  return(first_author_last_names)
}

# Remove NAs 
first_author_last_names <- first_author_last_names[!is.na(first_author_last_names)]

# Retrieve first author last names
last_names <- get_first_author_last_names(collection_key)

# Retrieve first author last names in alphabetical order 
last_names <- get_first_author_last_names(collection_key)

# Print the last names
print(last_names)

